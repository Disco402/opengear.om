#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2021 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for om_system
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.0',
    'status': ['preview'],
    'supported_by': 'opengear'
}

DOCUMENTATION = """
---
module: om_system
version_added: 1.0.0
short_description: 'Manages system attributes of om system'
description: 'Manages system attributes of om system.'
author: Adrian Van Katwyk
options:
  config:
    description: The provided configuration
    type: dict
    suboptions:
      hostname:
        type: str
        description: Update the Operations Manager appliance hostname.
      banner:
        type: str
        description: Update the Operations Manager appliance banner text.
      webui_session_timeout:
        type: int
        description: Update the WebUI session timeout (in minutes).
      cli_session_timeout:
        type: int
        description: Update the CLI session timeout (in minutes)
      system_authorized_keys:
        type: list
        description: Add an SSH key for the specified user
        suboptions:
          key:
            type: str
            description: The SSH key
          username:
            type: str
            description: The user associated with the SSH key
          id:
            type: str
            description: The SSH key id to be deleted.
        elements: dict
      ssh_port:
        type: int
        description: Update the system SSH port
      timezone:
        type: str
        description: Update the system timezone
      time:
        type: str
        description: Update the Operations Manager current time
      admin_info:
        type: dict
        description: Update the Operations Manager appliance system information
        suboptions:
          hostname:
            type: str
          contact:
            type: str
          location:
            type: str
      cell_reliability_test:
        type: dict
        description: Update configuration items related to running the cell reliability test. This allows the user to
        enable and disable the test, change how frequently it executes, configure the URL to use in the test and configure
        the alert threshold for signal strength.
        suboptions:
          enabled:
            type: bool
          period:
            type: int
          test_url:
            type: list
            elements: str
          signal_strength_threshold:
            type: dict
            suboptions:
              lower:
                type: int
              upper:
                type: int
      reboot:
        type: bool
  state:
    description:
    - The state of the configuration after module completion.
    type: str
    choices:
    - merged
    - overridden
    - deleted
    - gathered
    - rendered
    default: merged
"""
EXAMPLES = """
# Using deleted

<placeholder for the configuration example prior to module invocation>

- name: Configure interfaces
  myos_interfaces:
    operation: deleted

<placeholder for the configuration example after module invocation>


# Using merged

<placeholder for the configuration example prior to module invocation>

- name: Configure interfaces
  nxos_interfaces:
    config:
      - name: Ethernet1/1
        description: 'Configured by Ansible'
        enable: True
      - name: Ethernet1/2
        description: 'Configured by Ansible'
        enable: False
    operation: merged

<placeholder for the configuration example after module invocation>


# Using overridden

<placeholder for the configuration example prior to module invocation>

- name: Configure interfaces
  myos_interfaces:
    config:
      - name: Ethernet1/1
        description: 'Configured by Ansible'
        enable: True
      - name: Ethernet1/2
        description: 'Configured by Ansible'
        enable: False
    operation: overridden

<placeholder for the configuration example after module invocation>


# Using replaced

<placeholder for the configuration example prior to module invocation>

- name: Configure interfaces
  nxos_interfaces:
    config:
      - name: Ethernet1/1
        description: 'Configured by Ansible'
        enable: True
      - name: Ethernet1/2
        description: 'Configured by Ansible'
        enable: False
    operation: replaced

<placeholder for the configuration example after module invocation>


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.opengear.om.plugins.module_utils.network.om.argspec.system.system import SystemArgs
from ansible_collections.opengear.om.plugins.module_utils.network.om.config.system.system import System


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=SystemArgs.argument_spec,
                           supports_check_mode=True)

    result = System(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
